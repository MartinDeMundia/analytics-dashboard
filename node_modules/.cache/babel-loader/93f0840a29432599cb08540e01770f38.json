{"ast":null,"code":"import React from'react';import{XAxis,YAxis,CartesianGrid,Tooltip,Legend}from'recharts';import{BarChart,Bar,Cell}from'recharts';import{scaleOrdinal}from'd3-scale';import{schemeCategory10}from'd3-scale-chromatic';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var getPath=function getPath(x,y,width,height){return\"M\".concat(x,\",\").concat(y+height,\"\\n          C\").concat(x+width/3,\",\").concat(y+height,\" \").concat(x+width/2,\",\").concat(y+height/3,\" \").concat(x+width/2,\", \").concat(y,\"\\n          C\").concat(x+width/2,\",\").concat(y+height/3,\" \").concat(x+2*width/3,\",\").concat(y+height,\" \").concat(x+width,\", \").concat(y+height,\"\\n          Z\");};var TriangleBar=function TriangleBar(props){var fill=props.fill,x=props.x,y=props.y,width=props.width,height=props.height;return/*#__PURE__*/_jsx(\"path\",{d:getPath(x,y,width,height),stroke:\"none\",fill:fill});};var colors=scaleOrdinal(schemeCategory10).range();var RevenueChart=function RevenueChart(props){var dbObject=props.dbObject;var obj=[];for(var x in dbObject){obj.push({name:dbObject[x].name,revenue:dbObject[x].revenue});}return/*#__PURE__*/_jsx(\"div\",{class:\"card-body py-0 chart_container\",children:/*#__PURE__*/_jsxs(BarChart,{width:500,height:300,data:obj,margin:{top:200,right:30,left:20,bottom:5},children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"name\"}),/*#__PURE__*/_jsx(YAxis,{}),/*#__PURE__*/_jsx(Tooltip,{}),/*#__PURE__*/_jsx(Legend,{}),/*#__PURE__*/_jsx(Bar,{dataKey:\"revenue\",fill:\"#8884d8\",shape:/*#__PURE__*/_jsx(TriangleBar,{}),label:{position:'top'},children:obj.map(function(entry,index){return/*#__PURE__*/_jsx(Cell,{fill:colors[index%20]},\"cell-\".concat(index));})})]})});};export default RevenueChart;","map":{"version":3,"sources":["D:/Developers/Git SVN/React-GraphQL/analytics-dashboard/src/components/RevenueChart.js"],"names":["React","XAxis","YAxis","CartesianGrid","Tooltip","Legend","BarChart","Bar","Cell","scaleOrdinal","schemeCategory10","getPath","x","y","width","height","TriangleBar","props","fill","colors","range","RevenueChart","dbObject","obj","push","name","revenue","top","right","left","bottom","position","map","entry","index"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend,   \r\n  } from 'recharts';\r\nimport PropTypes from 'prop-types';\r\nimport { BarChart, Bar, Cell } from 'recharts';\r\nimport { scaleOrdinal } from 'd3-scale';\r\nimport { schemeCategory10 } from 'd3-scale-chromatic';\r\n\r\n\r\nconst getPath = (x, y, width, height) => `M${x},${y + height}\r\n          C${x + width / 3},${y + height} ${x + width / 2},${y + height / 3} ${x + width / 2}, ${y}\r\n          C${x + width / 2},${y + height / 3} ${x + (2 * width) / 3},${y + height} ${x + width}, ${y + height}\r\n          Z`;\r\n\r\nconst TriangleBar = (props) => {\r\n  const { fill, x, y, width, height } = props;\r\n\r\n  return <path d={getPath(x, y, width, height)} stroke=\"none\" fill={fill} />;\r\n};\r\n\r\nTriangleBar.propTypes = {\r\n  fill: PropTypes.string,\r\n  x: PropTypes.number,\r\n  y: PropTypes.number,\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n};\r\nconst colors = scaleOrdinal(schemeCategory10).range();\r\nconst RevenueChart = (props) => {\r\n    const { dbObject } = props;\r\n    const obj = [];\r\n    for (var x in dbObject) {  \r\n       obj.push({name: dbObject[x].name ,revenue:dbObject[x].revenue});\r\n     }\r\n return (       \r\n    <div class=\"card-body py-0 chart_container\">\r\n    <BarChart\r\n        width={500}\r\n        height={300}\r\n        data={obj}\r\n        margin={{\r\n            top: 200,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n        }}\r\n        >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Bar dataKey=\"revenue\" fill=\"#8884d8\" shape={<TriangleBar />} label={{ position: 'top' }}>\r\n            {obj.map((entry, index) => (\r\n            <Cell key={`cell-${index}`} fill={colors[index % 20]} />\r\n            ))}\r\n        </Bar>\r\n    </BarChart>\r\n</div> \r\n);\r\n};\r\nexport default RevenueChart;"]},"metadata":{},"sourceType":"module"}