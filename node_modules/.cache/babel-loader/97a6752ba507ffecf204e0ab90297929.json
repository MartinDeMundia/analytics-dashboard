{"ast":null,"code":"var _jsxFileName = \"D:\\\\Developers\\\\Git SVN\\\\React-GraphQL\\\\analytics-dashboard\\\\src\\\\components\\\\RevenueChart.js\";\nimport React from 'react';\nimport { XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport PropTypes from 'prop-types';\nimport { BarChart, Bar, Cell } from 'recharts';\nimport { scaleOrdinal } from 'd3-scale';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getPath = (x, y, width, height) => `M${x},${y + height}\n          C${x + width / 3},${y + height} ${x + width / 2},${y + height / 3} ${x + width / 2}, ${y}\n          C${x + width / 2},${y + height / 3} ${x + 2 * width / 3},${y + height} ${x + width}, ${y + height}\n          Z`;\n\nconst TriangleBar = props => {\n  const {\n    fill,\n    x,\n    y,\n    width,\n    height\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"path\", {\n    d: getPath(x, y, width, height),\n    stroke: \"none\",\n    fill: fill\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 10\n  }, this);\n};\n\n_c = TriangleBar;\nTriangleBar.propTypes = {\n  fill: PropTypes.string,\n  x: PropTypes.number,\n  y: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number\n};\nconst colors = scaleOrdinal(schemeCategory10).range();\n\nconst RevenueChart = props => {\n  const {\n    dbObject\n  } = props;\n  const obj = [];\n\n  for (var x in dbObject) {\n    obj.push({\n      name: dbObject[x].name,\n      revenue: dbObject[x].revenue\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"card-body py-0 chart_container\",\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      width: 500,\n      height: 300,\n      data: obj,\n      margin: {\n        top: 170,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"revenue\",\n        fill: \"#8884d8\",\n        shape: /*#__PURE__*/_jsxDEV(TriangleBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 54\n        }, this),\n        label: {\n          position: 'top'\n        },\n        children: obj.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n          fill: colors[index % 20]\n        }, `cell-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = RevenueChart;\nexport default RevenueChart;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TriangleBar\");\n$RefreshReg$(_c2, \"RevenueChart\");","map":{"version":3,"sources":["D:/Developers/Git SVN/React-GraphQL/analytics-dashboard/src/components/RevenueChart.js"],"names":["React","XAxis","YAxis","CartesianGrid","Tooltip","Legend","PropTypes","BarChart","Bar","Cell","scaleOrdinal","schemeCategory10","getPath","x","y","width","height","TriangleBar","props","fill","propTypes","string","number","colors","range","RevenueChart","dbObject","obj","push","name","revenue","top","right","left","bottom","position","map","entry","index"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend,   \r\n  } from 'recharts';\r\nimport PropTypes from 'prop-types';\r\nimport { BarChart, Bar, Cell } from 'recharts';\r\nimport { scaleOrdinal } from 'd3-scale';\r\nimport { schemeCategory10 } from 'd3-scale-chromatic';\r\n\r\n\r\nconst getPath = (x, y, width, height) => `M${x},${y + height}\r\n          C${x + width / 3},${y + height} ${x + width / 2},${y + height / 3} ${x + width / 2}, ${y}\r\n          C${x + width / 2},${y + height / 3} ${x + (2 * width) / 3},${y + height} ${x + width}, ${y + height}\r\n          Z`;\r\n\r\nconst TriangleBar = (props) => {\r\n  const { fill, x, y, width, height } = props;\r\n\r\n  return <path d={getPath(x, y, width, height)} stroke=\"none\" fill={fill} />;\r\n};\r\n\r\nTriangleBar.propTypes = {\r\n  fill: PropTypes.string,\r\n  x: PropTypes.number,\r\n  y: PropTypes.number,\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n};\r\nconst colors = scaleOrdinal(schemeCategory10).range();\r\nconst RevenueChart = (props) => {\r\n    const { dbObject } = props;\r\n    const obj = [];\r\n    for (var x in dbObject) {  \r\n       obj.push({name: dbObject[x].name ,revenue:dbObject[x].revenue});\r\n     }\r\n return (       \r\n    <div class=\"card-body py-0 chart_container\">\r\n    <BarChart\r\n        width={500}\r\n        height={300}\r\n        data={obj}\r\n        margin={{\r\n            top: 170,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n        }}\r\n        >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Bar dataKey=\"revenue\" fill=\"#8884d8\" shape={<TriangleBar />} label={{ position: 'top' }}>\r\n            {obj.map((entry, index) => (\r\n            <Cell key={`cell-${index}`} fill={colors[index % 20]} />\r\n            ))}\r\n        </Bar>\r\n    </BarChart>\r\n</div> \r\n);\r\n};\r\nexport default RevenueChart;"]},"metadata":{},"sourceType":"module"}